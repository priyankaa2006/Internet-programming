Report content
You said:
CONVERSION OF STATIC WEBPAGES INTO DYNAMIC USING SERVLETS
Date:
AIM:
 To convert the static web pages into dynamic web pages using servlets (or JSP) and cookies.
PROCEDURE:
1. We will create ahtml form for entering the user name,password and card ID.
2. From the above HTML form, the servlet program is invoked in which the validity of the user
name,password and card id is checked.if it is a valid user then the welcome message will be
displayed otherwise the ‚Äúinvalid user‚Äù message will be displayed. In this servlet we set the
cookies in which the current user name is stored.
3. Compile the above servlet Login servlet.java and copy its class file in tomcats folder at
c:\tomcatdirectory\webapps\examples\WEB-INF\classes.
4. Then edit the web.xml in WEB-INF folder.We must store he user information such as user
name,password and card id in the web.xml using init-param.
5. On successful login , the information from the cookie is checked and shopping cart page for
corressponding user can be displayed.
6. Compile the above servlet LoginSuccess.java and copy its class file in the tomcat's folder at
c:\tomcatdirectory\webapps\examples\WEB-INF\classes.
7. Then edit the web.xml in WEB-INF folder.
8. Start tomcat web server.Open the web browser and display the login form created in step1.
ChatGPT said:
It looks like you need guidance on converting static web pages into dynamic ones using Servlets and Cookies. Here's a breakdown of how you can implement this project step by step:

Project: Converting Static Web Pages into Dynamic Using Servlets
Technologies Used
Frontend: HTML, CSS

Backend: Java Servlets

Server: Apache Tomcat

Storage: Web.xml (for storing credentials)

1. Creating the HTML Form (login.html)
Create a simple login form for users to enter their credentials.

html
Copy
<!DOCTYPE html>
<html>
<head>
    <title>Login Page</title>
</head>
<body>
    <h2>Login</h2>
    <form action="LoginServlet" method="post">
        Username: <input type="text" name="username"><br>
       
You said:
make it more simple
ChatGPT said:
Here‚Äôs a simpler version of your login form:

html
Copy
<!DOCTYPE html>
<html>
<head>
    <title>Login</title>
</head>
<body>
    <h2>Login</h2>
    <form action="LoginServlet" method="post">
        <input type="text" name="username" placeholder="Username" required><br>
        <input type="password" name="password" placeholder="Password" required><br>
        <input type="text" name="cardId" placeholder="Card ID" required><br>
        <button type="submit">Login</button>
    </form>
</body>
</html>
This keeps it minimal while still being functional. Let me know if you need further simplifications! üòä








You said:
CONVERSION OF STATIC WEBPAGES INTO DYNAMIC USING SERVLETS
Date:
AIM:
 To convert the static web pages into dynamic web pages using servlets (or JSP) and cookies.
PROCEDURE:
1. We will create ahtml form for entering the user name,password and card ID.
2. From the above HTML form, the servlet program is invoked in which the validity of the user
name,password and card id is checked.if it is a valid user then the welcome message will be
displayed otherwise the ‚Äúinvalid user‚Äù message will be displayed. In this servlet we set the
cookies in which the current user name is stored.
3. Compile the above servlet Login servlet.java and copy its class file in tomcats folder at
c:\tomcatdirectory\webapps\examples\WEB-INF\classes.
4. Then edit the web.xml in WEB-INF folder.We must store he user information such as user
name,password and card id in the web.xml using init-param.
5. On successful login , the information from the cookie is checked and shopping cart page for
corressponding user can be displayed.
6. Compile the above servlet LoginSuccess.java and copy its class file in the tomcat's folder at
c:\tomcatdirectory\webapps\examples\WEB-INF\classes.
7. Then edit the web.xml in WEB-INF folder.
8. Start tomcat web server.Open the web browser and display the login form created in step1.  (make it more simple)
ChatGPT said:
Here‚Äôs a simplified version of your procedure:

CONVERSION OF STATIC WEBPAGES INTO DYNAMIC USING SERVLETS
Date:
AIM: Convert static web pages into dynamic ones using Servlets (or JSP) and Cookies.

PROCEDURE:
Create an HTML form for username, password, and card ID input.

Submit the form to a Servlet that checks the validity of the credentials.

If valid ‚Üí Show a welcome message and store the username in a cookie.

If invalid ‚Üí Show an "Invalid user" message.

Compile LoginServlet.java and place its class file in:
c:\tomcat\webapps\examples\WEB-INF\classes.

Edit web.xml (inside WEB-INF folder) to store user details using init-param.

On successful login, retrieve user info from the cookie and show the shopping cart page.

Compile LoginSuccess.java and place its class file in the same Tomcat directory.

Update web.xml again if needed.

Start Tomcat, open a web browser, and load the login page.

This version keeps it clear and concise! Let me know if you need any further simplifications. üòä

You said:
give me the simplecode
ChatGPT said:
Here‚Äôs a simple implementation of converting a static webpage into a dynamic one using Servlets and Cookies.

Step 1: Create a Simple HTML Login Page (login.html)
This page collects the username, password, and card ID from the user.

html
Copy
<!DOCTYPE html>
<html>
<head>
    <title>Login</title>
</head>
<body>
    <h2>Login</h2>
    <form action="LoginServlet" method="post">
        <input type="text" name="username" placeholder="Username" required><br>
        <input type="password" name="password" placeholder="Password" required><br>
        <input type="text" name="cardId" placeholder="Card ID" required><br>
        <button type="submit">Login</button>
    </form>
</body>
</html>
Step 2: Create the Servlet for Handling Login (LoginServlet.java)
This servlet validates user credentials, sets a cookie, and redirects the user.

java
Copy
import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class LoginServlet extends HttpServlet {
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String username = request.getParameter("username");
        String password = request.getParameter("password");
        String cardId = request.getParameter("cardId");

        // Simple hardcoded validation (Replace with real DB validation)
        if ("admin".equals(username) && "1234".equals(password) && "5678".equals(cardId)) {
            // Create a cookie
            Cookie userCookie = new Cookie("username", username);
            userCookie.setMaxAge(60 * 60); // 1 hour expiry
            response.addCookie(userCookie);

            // Redirect to success page
            response.sendRedirect("welcome");
        } else {
            response.getWriter().println("Invalid User! <a href='login.html'>Try Again</a>");
        }
    }
}
Step 3: Create a Welcome Servlet (WelcomeServlet.java)
This servlet reads the cookie and displays a welcome message.

java
Copy
import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class WelcomeServlet extends HttpServlet {
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType("text/html");
        PrintWriter out = response.getWriter();

        // Retrieve cookies
        Cookie[] cookies = request.getCookies();
        String username = null;

        if (cookies != null) {
            for (Cookie cookie : cookies) {
                if (cookie.getName().equals("username")) {
                    username = cookie.getValue();
                }
            }
        }

        if (username != null) {
            out.println("<h2>Welcome, " + username + "!</h2>");
            out.println("<a href='logout'>Logout</a>");
        } else {
            out.println("<h2>No user found! <a href='login.html'>Login</a></h2>");
        }
    }
}
Step 4: Create a Logout Servlet (LogoutServlet.java)
This servlet clears the cookie and redirects to the login page.

java
Copy
import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class LogoutServlet extends HttpServlet {
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        Cookie userCookie = new Cookie("username", "");
        userCookie.setMaxAge(0); // Delete cookie
        response.addCookie(userCookie);

        response.sendRedirect("login.html");
    }
}
Step 5: Configure web.xml (Inside WEB-INF folder)
This file maps URLs to Servlets in the Tomcat server.

xml
Copy
<web-app>
    <servlet>
        <servlet-name>LoginServlet</servlet-name>
        <servlet-class>LoginServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>LoginServlet</servlet-name>
        <url-pattern>/LoginServlet</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>WelcomeServlet</servlet-name>
        <servlet-class>WelcomeServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>WelcomeServlet</servlet-name>
        <url-pattern>/welcome</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>LogoutServlet</servlet-name>
        <servlet-class>LogoutServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>LogoutServlet</servlet-name>
        <url-pattern>/logout</url-pattern>
    </servlet-mapping>
</web-app>
Step 6: Deployment
Compile Java files (javac LoginServlet.java WelcomeServlet.java LogoutServlet.java).

Copy class files into webapps/examples/WEB-INF/classes/.

Restart Tomcat and open http://localhost:8080/examples/login.html.

‚úÖ Done! Now you have a simple login system with cookies in Servlets. üöÄ Let me know if you need any modifications! üòä







You said:
STORING A FORM DATA IN PHP
Date:
AIM:
To store a PHP form data into database.
PROCEDURE:
1. Form is created with fileds name, mail id, contact and address.
2. Table is created in mysql.
3. The input data entered into the fields are stored using PHP code.(make it more simpler)
ChatGPT said:
STORING FORM DATA IN PHP
Date:
AIM: Store form data into a MySQL database using PHP.

PROCEDURE:
Create an HTML form with fields: Name, Email, Contact, and Address.

Create a MySQL table to store the data.

Use PHP to insert form data into the database.

Simple Code Implementation
Step 1: Create the Form (form.html)
html
Copy
<!DOCTYPE html>
<html>
<head>
    <title>Store Form Data</title>
</head>
<body>
    <h2>Enter Details</h2>
    <form action="store.php" method="post">
        <input type="text" name="name" placeholder="Name" required><br>
        <input type="email" name="email" placeholder="Email" required><br>
        <input type="text" name="contact" placeholder="Contact" required><br>
        <input type="text" name="address" placeholder="Address" required><br>
        <button type="submit">Submit</button>
    </form>
</body>
</html>
Step 2: Create MySQL Table
Run this in phpMyAdmin or MySQL CLI:

sql
Copy
CREATE DATABASE formDB;
USE formDB;

CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100),
    email VARCHAR(100),
    contact VARCHAR(15),
    address TEXT
);
Step 3: Store Data in Database (store.php)
php
Copy
<?php
$servername = "localhost";
$username = "root";  // Change if needed
$password = "";      // Change if needed
$database = "formDB";

// Create connection
$conn = new mysqli($servername, $username, $password, $database);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Get form data
$name = $_POST['name'];
$email = $_POST['email'];
$contact = $_POST['contact'];
$address = $_POST['address'];

// Insert into database
$sql = "INSERT INTO users (name, email, contact, address) VALUES ('$name', '$email', '$contact', '$address')";

if ($conn->query($sql) === TRUE) {
    echo "Data stored successfully!";
} else {
    echo "Error: " . $conn->error;
}

$conn->close();
?>
Step 4: Run the Project
Save form.html and store.php in your htdocs folder (if using XAMPP).

Start Apache and MySQL in XAMPP.

Open http://localhost/form.html in a browser.

Fill out the form and submit.

‚úÖ Done! Your form data is now stored in MySQL using PHP. üöÄ Let me know if you need any modifications! üòä






You said:
STORING A FORM DATA IN PHP
Date:
AIM:
To store a PHP form data into database.
PROCEDURE:
1. Form is created with fileds name, mail id, contact and address.
2. Table is created in mysql.
3. The input data entered into the fields are stored using PHP code.(make it more simpler)
ChatGPT said:
STORING FORM DATA IN PHP
AIM: Store form data in a MySQL database using PHP.

PROCEDURE:
Create an HTML form with Name, Email, Contact, and Address fields.

Create a MySQL table to store the data.

Use PHP to insert form data into the database.

Simple Code
Step 1: Create a Form (form.html)
html
Copy
<form action="store.php" method="post">
    <input type="text" name="name" placeholder="Name" required><br>
    <input type="email" name="email" placeholder="Email" required><br>
    <input type="text" name="contact" placeholder="Contact" required><br>
    <input type="text" name="address" placeholder="Address" required><br>
    <button type="submit">Submit</button>
</form>
Step 2: Create MySQL Table
Run in phpMyAdmin or MySQL:

sql
Copy
CREATE DATABASE formDB;
USE formDB;
CREATE TABLE users (id INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(100), email VARCHAR(100), contact VARCHAR(15), address TEXT);
Step 3: Store Data in MySQL (store.php)
php
Copy
<?php
$conn = new mysqli("localhost", "root", "", "formDB"); 

$name = $_POST['name'];
$email = $_POST['email'];
$contact = $_POST['contact'];
$address = $_POST['address'];

$sql = "INSERT INTO users (name, email, contact, address) VALUES ('$name', '$email', '$contact', '$address')";
$conn->query($sql);
echo "Data saved!";
$conn->close();
?>
Run the Project
Save form.html and store.php in htdocs (XAMPP).

Start Apache & MySQL in XAMPP.

Open http://localhost/form.html, fill out the form, and submit.

‚úÖ Done! Your form data is now stored in MySQL using PHP. üöÄ










You said:
FORM VALIDATION USING PHP REGULAR EXPRESSION
Date:
AIM:
To validate the form using PHP regular expression.
PROCEDURE:
1. Form is created for class registration with fileds.
2. These fields are validated using PHP code.
3. Form is displayed.(make it more simple) 
ChatGPT said:
FORM VALIDATION USING PHP REGULAR EXPRESSION
AIM: Validate form fields using PHP regular expressions.

PROCEDURE:
Create a registration form with input fields.

Validate fields using PHP regular expressions.

Show success or error messages.

Simple Code
Step 1: Create the Form (form.html)
html
Copy
<form action="validate.php" method="post">
    <input type="text" name="name" placeholder="Name" required><br>
    <input type="email" name="email" placeholder="Email" required><br>
    <input type="text" name="phone" placeholder="Phone (10 digits)" required><br>
    <button type="submit">Register</button>
</form>
Step 2: Validate Data in PHP (validate.php)
php
Copy
<?php
$name = $_POST['name'];
$email = $_POST['email'];
$phone = $_POST['phone'];

if (!preg_match("/^[a-zA-Z ]+$/", $name)) {
    die("Invalid Name");
}
if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    die("Invalid Email");
}
if (!preg_match("/^[0-9]{10}$/", $phone)) {
    die("Invalid Phone Number");
}

echo "Registration Successful!";
?>
Run the Project
Save form.html and validate.php in htdocs (XAMPP).

Start Apache in XAMPP.

Open http://localhost/form.html, fill out the form, and submit.

‚úÖ Done! Your form is now validated using PHP regex. üöÄ







You said:
FORM VALIDATION USING PHP REGULAR EXPRESSION
Date:
AIM:
To validate the form using PHP regular expression.
PROCEDURE:
1. Form is created for class registration with fileds.
2. These fields are validated using PHP code.
3. Form is displayed.
ChatGPT said:
FORM VALIDATION USING PHP REGULAR EXPRESSION
AIM: Validate form fields using PHP regular expressions.

PROCEDURE:
Create a registration form with Name, Email, and Phone fields.

Validate fields using PHP regular expressions.

Display the form with validation results.

Code Implementation
Step 1: Create the Registration Form (form.html)
html
Copy
<form action="validate.php" method="post">
    <input type="text" name="name" placeholder="Name" required><br>
    <input type="email" name="email" placeholder="Email" required><br>
    <input type="text" name="phone" placeholder="Phone (10 digits)" required><br>
    <button type="submit">Register</button>
</form>
Step 2: Validate Data in PHP (validate.php)
php
Copy
<?php
$name = $_POST['name'];
$email = $_POST['email'];
$phone = $_POST['phone'];

$errors = [];

// Name validation (Only letters and spaces)
if (!preg_match("/^[a-zA-Z ]+$/", $name)) {
    $errors[] = "Invalid Name";
}

// Email validation
if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    $errors[] = "Invalid Email";
}

// Phone validation (Exactly 10 digits)
if (!preg_match("/^[0-9]{10}$/", $phone)) {
    $errors[] = "Invalid Phone Number";
}

// Show validation result
if (empty($errors)) {
    echo "Registration Successful!";
} else {
    foreach ($errors as $error) {
        echo "$error<br>";
    }
}
?>
How to Run
Save form.html and validate.php in htdocs (XAMPP).

Start Apache in XAMPP.

Open http://localhost/form.html, fill out the form, and submit.









‚úÖ Done! Your form is now validated using PHP regex. üöÄ

You said:
SESSION TRACKING USING HIDDEN FORM FIELDS
Date:
AIM:
To write a Java Program for Session Tracking Using Hidden Form Fields. This servlet
demonstrates session tracking using hidden form fields by displaying the shopping cart for a
bookworm. Note that, if you try this servlet, the buttons at the bottom of the page it generates don't
take you anywhere real.
PROCEDURE:
1. Create a web page using HTML form that contains the fields such as text, password and one
submit button.
2. Set the URL of the server as the value of form‚Äôs action attribute.
3. Ask if the user wants to add more items or check out.
4. Include the current items as hidden fields so they'll be passed on and submit to self-(make it more simple)
ChatGPT said:
SESSION TRACKING USING HIDDEN FORM FIELDS
AIM: Track user sessions using hidden form fields in Java Servlets.

PROCEDURE:
Create an HTML form with text, password, and a submit button.

Set the form‚Äôs action to a Servlet URL.

Ask the user to add more items or check out.

Store selected items as hidden fields and submit the form.

Simple Code Implementation
Step 1: Create the Shopping Form (index.html)
html
Copy
<!DOCTYPE html>
<html>
<head>
    <title>Book Store</title>
</head>
<body>
    <h2>Shopping Cart</h2>
    <form action="CartServlet" method="post">
        <input type="text" name="book" placeholder="Enter Book Name" required><br>
        <input type="hidden" name="cart" value=""><br>
        <button type="submit">Add to Cart</button>
    </form>
</body>
</html>
Step 2: Create the Servlet (CartServlet.java)
java
Copy
import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class CartServlet extends HttpServlet {
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType("text/html");
        PrintWriter out = response.getWriter();

        String book = request.getParameter("book");
        String cart = request.getParameter("cart");

        if (cart == null) {
            cart = book;
        } else {
            cart += ", " + book;
        }

        out.println("<h2>Your Shopping Cart:</h2>");
        out.println("<p>" + cart + "</p>");

        out.println("<form action='CartServlet' method='post'>");
        out.println("<input type='text' name='book' placeholder='Enter Book Name' required><br>");
        out.println("<input type='hidden' name='cart' value='" + cart + "'><br>");
        out.println("<button type='submit'>Add More</button>");
        out.println("</form>");

        out.println("<form action='CheckoutServlet' method='post'>");
        out.println("<input type='hidden' name='cart' value='" + cart + "'>");
        out.println("<button type='submit'>Checkout</button>");
        out.println("</form>");
    }
}
Step 3: Checkout Servlet (CheckoutServlet.java)
java
Copy
import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class CheckoutServlet extends HttpServlet {
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType("text/html");
        PrintWriter out = response.getWriter();

        String cart = request.getParameter("cart");

        out.println("<h2>Checkout</h2>");
        out.println("<p>You have purchased: " + cart + "</p>");
        out.println("<p>Thank you for shopping!</p>");
    }
}
Step 4: Configure web.xml (Inside WEB-INF folder)
xml
Copy
<web-app>
    <servlet>
        <servlet-name>CartServlet</servlet-name>
        <servlet-class>CartServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>CartServlet</servlet-name>
        <url-pattern>/CartServlet</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>CheckoutServlet</servlet-name>
        <servlet-class>CheckoutServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>CheckoutServlet</servlet-name>
        <url-pattern>/CheckoutServlet</url-pattern>
    </servlet-mapping>
</web-app>
How to Run:
Compile Java files (javac CartServlet.java CheckoutServlet.java).

Copy class files into webapps/examples/WEB-INF/classes/.

Start Tomcat and open http://localhost:8080/examples/index.html.

Enter a book name, add more, or checkout.

‚úÖ Done! Your shopping cart session is tracked using hidden fields in Servlets. üöÄ
